Part 1 Report: https://docs.google.com/document/d/19sUrA7F3ge2A8OCZsB6iyLImIoT-bO0p/edit
Part 2 Report: https://docs.google.com/document/u/0/d/1DJGqNswKBoh06wds505FQama63LADDyj/edit?fromCopy=true 

    SECTION 1

PART 1
LAS ETL 

import arcpy
import requests 
import io
import os 
import zipfile
arcpy.env.workspace = r'G:\My Drive\GIS 5571\Lab2.1\Lab2.1\Lab2.gdb'
working_dir = r'G:\My Drive\GIS 5571\Lab2.1\Lab2.1\lab2.gdb'

#Bring in LAS Dataset 
las_file = r'https://resources.gisdata.mn.gov/pub/data/elevation/lidar/examples/lidar_sample/las/4342-12-05.las'\n'
las_actual.content = requests.post(las_file)
path_to_las= os.path.join(working_dir, 'output.las')
with open (path_to_las, 'wb') as f:
	f.write(las_actual.content)
	
#Create LAS Dataset
arcpy.management.CreateLasDataset('outputlas.las', 'lasdatasetoutput.lasd')

#convert LAS to DEM
arcpy.conversion.LasDatasetToRaster("4342-12-06.las", r"g:\My Drive\GIS 5571\Lab2.1\Lab2.1\Lab2.gdb\TIN2", "ELEVATION", "BINNING AVERAGE LINEAR", "FLOAT", "CELLSIZE", 10, 1)

#export DEM 

aprx= arcpy.mpArcGISProject(r"G:\My Drive\GIS 5571\Lab2.2\lab2.2.aprx")
lyt = aprx.listLayouts("DEM*")[0]
#lyt.exportToPDF(r"G:\My Drive\GIS 5571\Lab2.2\Output\DEM.pdf" , resolution = 300)

#Raster to TIN

arcpy.ddd.RasterTin("TIN2", r"G:\My Drive\GIS 5571\Lab2.1\Lab2.1\TIN3", 9.56, 1500000, 1)

#Export TIN 
aprx= arcpy.mpArcGISProject(r"G:\My Drive\GIS 5571\Lab2.2\lab2.2.aprx")
lyt = aprx.listLayouts("TIN*")[0]
#lyt.exportToPDF(r"G:\My Drive\GIS 5571\Lab2.2\Output\TIN.pdf" , resolution = 300)

#Visualization
#visualization was done inside of the map viewer for easy of use 
#This was done by bringing the TIN into the map viewer, and making an additional Pane with a 3D Local scene for the las data to be viewed in 3D

Part 2

import arcpy
import requests 
import io
import os 
import zipfile
arcpy.env.workspace = r'G:\My Drive\GIS 5571\Lab2.2\Lab2.2\Lab2.gdb'
working_dir = r'G:\My Drive\GIS 5571\Lab2.2\Lab2.2\lab2.gdb'

#Prism ETL 
PRISM_request_URL = r'https:prism.oregonstate.edu/fetchData.php'
PRISM_Params=r'type=all_bil&kind=normals&spatial=4km&elem=ppt&temporal=annual'
final_PRISM_path=PRISM_request_URL+'?'PRISM_params
PRISM_post_request= requests.post(final_PRISM_path)
PRISMzipfile = zipfile.ZipFile(io.BytesIO(PRISM_post_request.content))
PRISMzipfile.extractall(working_dir)

#Conversions 

#Create Mosaic 
arcpy.management.CreateMosaicDataset(r"G:\My Drive\GIS 5571\Lab2.2\lab2.2\lab2.gdb", "PRISM_Mosaic", 'GEOGCS["GCS_North_American_1983",DATUM["D_North_American_1983",SPHEROID["GRS_1980",6378137.0,298.257222101]],PRIMEM["Greenwich",0.0],UNIT["Degree",0.0174532925199433]]', None, '', "NONE", None)

#Add Raster to Mosaic Dataset
arcpy.management.AddRastersToMosaicDataset("PRISM_Mosi", "Raster Dataset", r"G:\My Drive\GIS 5571\Lab2.2\Lab2.2\lab2.gdb\PRISM", "UPDATE_CELL_SIZES", "UPDATE_BOUNDARY", "NO_OVERVIEWS", None, 0, 1500, None, '', "SUBFOLDERS", "ALLOW_DUPLICATES", "NO_PYRAMIDS", "NO_STATISTICS", "NO_THUMBNAILS", '', "NO_FORCE_SPATIAL_REFERENCE", "NO_STATISTICS", None, "NO_PIXEL_CACHE", r"G:\My Drive\GIS 5571\Lab2.2\Lab2.2\lab2.gdb\PRISM_Mosi")

# Add Standard time to Rasters 
This was done by manually adding a attribute (as a date) to the attribute table and inputing the standard time 

#Build Miltidimensional Info
arcpy.md.BuildMultidimensionalInfo("PRISM_Mosi", "Name", None, None, "NO_DELETE_MULTIDIMENSIONAL_INFO")

#Make Multidimensional Raster Layer 

in_multidimensional_raster = r"G:\My Drive\GIS 5571\Lab2.2\lab2.2\lab2\PRISM_Mosi.crf"
out_multidimensional_raster_layer = r"G:\My Drive\GIS 5571\Lab2.2\lab2.2\lab2\PRISM_Multi.crf"
variables = "Value"
dimension_def = "BY_ITERATION"
dimension = "StdTime"
start_of_first_iteration = "PRISM_ppt_30yr_normal_4kmM3_01_bil"
end_of_first_iteration = "PRISM_ppt_30yr_normal_4kmM3_annual_bil"
iteration_step = "1"
iteration_unit = "YEARS"
template = "01/01, 01/02, 01/03"
 
arcpy.md.MakeMultidimensionalRasterLayer(
	in_multidimensional_raster, out_multidimensional_raster_layer, 
	variables, dimension_def, dimension, start_of_first_iteration, 
	end_of_first_iteration, iteration_step, iteration_unit, template)

#Convert to Space Time Cube 
arcpy.CreateSpaceTimeCubeMDRasterLayer_stpm(r"PRISM_multi", 
                  r"PRISM_SpaceTtimeCube.nc", "PRISM_Space_Time")

#Export to disk
No code used for this step, just used the export function and saved to local machine 

#Export as GIF
lyt = aprx.listLayouts("PRISM_Space_Time*")[0]
#lyt.exportToGIF(r"C:\downloads\PRISM_Space_Time.gif")

    SECTION 2
    
#Aquire Data 

import arcpy
import zipfile 
import requests
import io
import os 

working_dir=r'G:\My Drive\GIS 5571\Lab2.3\Lab2.3\Lab2.gdb'

#ETL for Geospatial Commons 


landuse_file = r'https://resources.gisdata.mn.gov/pub/gdrs/data/pub/us_mn_state_dnr/biota_landcover_nlcd_mn_2019/tif_biota_landcover_nlcd_mn_2019.zip'
landuse_actual.content = requests.post(landuse_file)
landusezipfile = zipfile.ZipFile(io.BytesIO(landuse_post_request.content))
landusezipfile.extractall(working_dir)


DEM_file = r'https://resources.gisdata.mn.gov/pub/gdrs/data/pub/us_mn_state_dnr/elev_30m_digital_elevation_model/fgdb_elev_30m_digital_elevation_model.zip'
DEM_actual = requests.post(DEM_file)
DEMzipfile = zipfile.ZipFile(io.BytesIO(DEM_post_request.content))
DEMzipfile.extractall(working_dir)

#Clip to Relevent Area
arcpy.management.Clip("NLCD_2019_Land_Cover.tif", "566420 4876000 579000 4887420", r"G:\My Drive\GIS 5571\Lab2.3\Lab2.3\Lab2.gdb\NLCD_2019_Land_Cover_Clip", None, "255", "NONE", "NO_MAINTAIN_EXTENT")arcpy.management.Clip(r"Digital Elevation Model - 30m Resolution\Digital Elevation Model", "56420 4876000 579000 4887420", r"G:\My Drive\GIS 5571\Lab2.3\Lab2.3\Lab2.gdb\landcover_census_of_the_Clip", None, "32767", "NONE", "NO_MAINTAIN_EXTENT")
arcpy.management.Clip(r"Digital Elevation Model - 30m Resolution\Digital Elevation Model", "56420 4876000 579000 4887420", r"G:\My Drive\GIS 5571\Lab2.3\Lab2.3\Lab2.gdb\landcover_census_of_the_Clip", None, "32767", "NONE", "NO_MAINTAIN_EXTENT")

#Convert DEM to Slope 
out_raster = arcpy.sa.Slope("DEM", "DEGREE", 1, "PLANAR", "METER"); out_raster.save(r"G:\My Drive\GIS 5571\Lab2.3\Lab2.3\Lab2.gdb\Slope_Digita1")

#standardize slope
output_raster = arcpy.ia.RasterCalculator(' "Slope_Digita1" /90'); output_raster.save(r"g:\My Drive\GIS 5571\Lab2.3\Lab2.3\Lab2.gdb\slope__standarized")

#Raster Calculator: Landcover 

Farmland 
arcpy.ia.RasterCalculator(' "Land_Cover_Clip" == 81 or  "Land_Cover_Clip" == 82'); output_raster.save(r"g:\My Drive\GIS 5571\Lab2.3\Lab2.3\Lab2.gdb\Farmland")

Water
arcpy.ia.RasterCalculator(' "Land_Cover_Clip" == 90 or  "Land_Cover_Clip" == 95'); output_raster.save(r"g:\My Drive\GIS 5571\Lab2.3\Lab2.3\Lab2.gdb\Water")

Passable 
output_raster = arcpy.ia.RasterCalculator(' ("Land_Cover_Clip"== 41) or ( "Land_Cover_Clip" ==81) or ( "Land_Cover_Clip" == 21) or ( "Land_Cover_Clip" ==23) or ( "Land_Cover_Clip" == 22) or ( "Land_Cover_Clip" ==71)'); output_raster.save(r"g:\My Drive\GIS 5571\Lab2.3\Lab2.3\Lab2.gdb\Passable")

#Extract by Mask
out_raster = arcpy.sa.ExtractByMask("Water", "Start", "INSIDE", '566420 4876000 579020 4887430 PROJCS["NAD_1983_UTM_Zone_15N",GEOGCS["GCS_North_American_1983",DATUM["D_North_American_1983",SPHEROID["GRS_1980",6378137.0,298.257222101]],PRIMEM["Greenwich",0.0],UNIT["Degree",0.0174532925199433]],PROJECTION["Transverse_Mercator"],PARAMETER["False_Easting",500000.0],PARAMETER["False_Northing",0.0],PARAMETER["Central_Meridian",-93.0],PARAMETER["Scale_Factor",0.9996],PARAMETER["Latitude_Of_Origin",0.0],UNIT["Meter",1.0]]'); out_raster.save(r"G:\My Drive\GIS 5571\Lab2.3\Lab2.3\Lab2.gdb\Extract_Land1")
out_raster = arcpy.sa.ExtractByMask("Water", "End", "INSIDE", '566420 4876000 579020 4887430 PROJCS["NAD_1983_UTM_Zone_15N",GEOGCS["GCS_North_American_1983",DATUM["D_North_American_1983",SPHEROID["GRS_1980",6378137.0,298.257222101]],PRIMEM["Greenwich",0.0],UNIT["Degree",0.0174532925199433]],PROJECTION["Transverse_Mercator"],PARAMETER["False_Easting",500000.0],PARAMETER["False_Northing",0.0],PARAMETER["Central_Meridian",-93.0],PARAMETER["Scale_Factor",0.9996],PARAMETER["Latitude_Of_Origin",0.0],UNIT["Meter",1.0]]'); out_raster.save(r"G:\My Drive\GIS 5571\Lab2.3\Lab2.3\Lab2.gdb\Extract_Land1")

#Raster Calculator: Cost Surface 
	(1) Using all weights as 5
output_raster = arcpy.ia.RasterCalculator('(5 * "passable2") + (5* "Farmland3") + (5* "Water") + (5* "slope__standarized")'); output_raster.save(r"g:\My Drive\GIS 5571\Lab2.3\Lab2.3\Lab2.gdb\cost1")
	
	(2) Weighting Passable as a 5 and rest as 3
output_raster = arcpy.ia.RasterCalculator('(5 * "passable2") + (3* "Farmland3") + (3* "Water") + (3* "slope__standarized")'); output_raster.save(r"g:\My Drive\GIS 5571\Lab2.3\Lab2.3\Lab2.gdb\cost3")
	
	(3) Weighting slope as a 5 and rest as 3
output_raster = arcpy.ia.RasterCalculator('(3 * "passable2") + (3* "Farmland3") + (3* "Water") + (5* "slope__standarized")'); output_raster.save(r"g:\My Drive\GIS 5571\Lab2.3\Lab2.3\Lab2.gdb\cost4")


#Cost Distance
	(1) out_distance_raster = arcpy.sa.CostDistance("cost1", "cost1", None, r"G:\My Drive\GIS 5571\Lab2.3\Backlink1_1", None, None, None, None, ''); out_distance_raster.save(r"G:\My Drive\GIS 5571\Lab2.3\Lab2.3\Lab2.gdb\CostD1_2")
	(2) out_distance_raster = arcpy.sa.CostDistance("cost2", "cost2", None, r"G:\My Drive\GIS 5571\Lab2.3\Backlink1_2", None, None, None, None, ''); out_distance_raster.save(r"G:\My Drive\GIS 5571\Lab2.3\Lab2.3\Lab2.gdb\CostD1_3")
	(3) out_distance_raster = arcpy.sa.CostDistance("cost3", "cost3", None, r"G:\My Drive\GIS 5571\Lab2.3\Backlink1_3", None, None, None, None, ''); out_distance_raster.save(r"G:\My Drive\GIS 5571\Lab2.3\Lab2.3\Lab2.gdb\CostD1_4")
	
#Cost Path 
	(1) out_raster = arcpy.sa.CostPath("Extract by Mask Input raster or feature mask data (Points)", "CostD1_2", "Backlink1_1", "EACH_CELL", "IntegerValue", "INPUT_RANGE"); out_raster.save(r"G:\My Drive\GIS 5571\Lab2.3\Lab2.3\Lab2.gdb\CostPath1")
	(2) out_raster = arcpy.sa.CostPath("Extract by Mask Input raster or feature mask data (Points)", "CostD1_3", "Backlink1_2", "EACH_CELL", "IntegerValue", "INPUT_RANGE"); out_raster.save(r"G:\My Drive\GIS 5571\Lab2.3\Lab2.3\Lab2.gdb\CostPath2")
	(3) out_raster = arcpy.sa.CostPath("Extract by Mask Input raster or feature mask data (Points)", "CostD1_4", "Backlink1_3", "EACH_CELL", "IntegerValue", "INPUT_RANGE"); out_raster.save(r"G:\My Drive\GIS 5571\Lab2.3\Lab2.3\Lab2.gdb\CostPath3")

Start Point **remember to flip when imputing**
44.127985, -92.148796
End Point 
44.05418743989885, -92.04483056061326

