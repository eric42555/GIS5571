#Lab Report https://docs.google.com/document/d/1Th8FfARw9kuo32sdaUecOrAraYKMBbZg/edit?usp=sharing&ouid=100089053748434382929&rtpof=true&sd=true

# Note: ArcOnline was not utilized, no seperate Notebooks were made.

import arcpy
activate arcpy
import requests 
arcpy.env.workspace = r'G:\My Drive\GIS 5571\lab1\lab1.gdb'


#Bring in data 

#Geospatial Commons 
!curl -O https://resources.gisdata.mn.gov/pub/gdrs/data/pub/us_mn_state_dot/bdry_state/shp_bdry_state.zip "Boundary_zip"
!curl -O https://resources.gisdata.mn.gov/pub/gdrs/data/pub/us_mn_state_mngeo/health_facility_hospitals/shp_health_facility_hospitals.zip "Hospital_zip"

#NDAWN
base_ndawn_url = "https://ndawn.ndsu.nodak.edu/table.csv"

master_param= {
         "station" : "28"
         "variable" : "mdavt"
         "dfn" : "",
         "year" : "2022"
         
req_response = requests.get(base_ndawn_url, params = master_params)

with open("NameForNewCSVFile.csv" , "w") as newCSV_txt:
         newCSV_txt.write(req_response.content.decode('utf-8'))

#Google Places 

#API Key: AIzaSyDzj4ZeQln4oxDyR3off-JzlqcU77K5Vj8 assigned to eric4255@umn.edu

my_API_key = "AIzaSyDzj4ZeQln4oxDyR3off-JzlqcU77K5Vj8"
goog_places_URL_base = "https://maps.googleapis.com/maps/api/place/findplacefromtext/json"
user_input_place = "Costco Eden Prairie" 
         # second imput was "Costco Maple Grove"
formatted_input = user_input_place.replace(" ", "%20") 
formatted_input
input_param = "?input="+formatted_input
input_type = "&inputtype=textquery"
fields_param = "&fields=photos,formatted_address,name,rating,opening_hours,geometry"
key_param = "&key="+my_API_key
final_goog_path = goog_places_URL_base+input_param+input_type+fields_param+key_param
final_goog_path
goog_req_obj = requests.get(final_goog_path)
print(goog_req_obj.text)
#result named EP_response or MP_response 
EP_response['candidates'][0]['geometry']

# (x,y) points were used for further analysis 

#Transform Code (used for all data, change layer name/location)
arcpy.management.ConvertCoordinateNotation("Layer1", r"G:\My Drive\GIS 5571\lab1\lab1.gdb\Layer1_ConvertCoordinateNota", "UNIQUE_ID", "BKWYNAME", "DD_2", "DD_2", None, 'GEOGCS["GCS_WGS_1984",DATUM["D_WGS_1984",SPHEROID["WGS_1984",6378137.0,298.257223563]],PRIMEM["Greenwich",0.0],UNIT["Degree",0.0174532925199433]];-400 -400 1000000000;-100000 10000;-100000 10000;8.98315284119521E-09;0.001;0.001;IsHighPrecision', 'PROJCS["NAD_1983_UTM_Zone_15N",GEOGCS["GCS_North_American_1983",DATUM["D_North_American_1983",SPHEROID["GRS_1980",6378137.0,298.257222101]],PRIMEM["Greenwich",0.0],UNIT["Degree",0.0174532925199433]],PROJECTION["Transverse_Mercator"],PARAMETER["False_Easting",500000.0],PARAMETER["False_Northing",0.0],PARAMETER["Central_Meridian",-93.0],PARAMETER["Scale_Factor",0.9996],PARAMETER["Latitude_Of_Origin",0.0],UNIT["Meter",1.0]]', "INCLUDE_INVALID")

#Join Code (used for all API, change layer name/location)
arcpy.analysis.SpatialJoin("Layer1", r"layer2", r"G:\My Drive\GIS 5571\lab1\lab1.gdb\Layer1_SpatialJoin", "JOIN_ONE_TO_ONE", "KEEP_ALL")

#Print screen code (used for all API, change item name/location)
fields = ['item1', 
         'item2',
         'item3']

with arcpy.da.SearchCursor(field1, field2) as cursor:
    for row in cursor:
        if 'item' in row[2]:
            print(row)
            
df = pd.DataFrame([row for row in arcpy.da.SearchCursor(field1, field2)])

df.head()

#Save as Geodatabase (used for all API, change layer name/notation) 
arcpy.topographic.GeodatabaseToShape(r"Layer1;layer2", r"G:\My Drive\GIS 5571\lab1", "VALUES", "DEFENSE_BY_SUBTYPE", "NO_CREATE_EMPTIES")
